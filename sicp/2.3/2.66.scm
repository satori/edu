(define entry car)
(define left-branch cadr)
(define right-branch caddr)

(define make-tree list)

(define make-record cons)
(define key car)
(define data cdr)

(define (lookup given-key set-of-records)
  (cond ((null? set-of-records) #f)
		((= given-key (key (car set-of-records)))
		 (car set-of-records))
		((< given-key (key (car set-of-records)))
		 (lookup given-key (left-branch set-of-records)))
		((> given-key (key (car set-of-records)))
		 (lookup given-key (right-branch set-of-records)))))

(define database (make-tree (make-record 5 "Ben Bitdiddle")
							(make-tree (make-record 3 "Eva Lu Ator")
									   (make-tree (make-record 1 "Louis Reasoner")
												  '()
												  '())
									   '())
							(make-tree (make-record 9 "Alyssa P. Hacker")
									   (make-tree (make-record 7 "Cy D. Fect")
												  '()
												  '())
									   (make-tree (make-record 11 "Lem E. Tweakit")
												  '()
												  '()))))

(lookup 9 database)
