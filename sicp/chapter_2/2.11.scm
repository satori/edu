(define (make-interval a b)
  (cons a b))

(define (lower-bound i)
  (car i))

(define (upper-bound i)
  (cdr i))

(define (mul-interval x y)
  (let ((low-x (lower-bound x))
		(up-x (upper-bound x))
		(low-y (lower-bound y))
		(up-y (upper-bound y)))
	(cond ((and (>= low-x 0)
				(>= up-x 0)
				(>= low-y 0)
				(>= up-y 0))
		   (make-interval (* low-x low-y) (* up-x up-y)))
		  ((and (>= low-x 0)
				(>= up-x 0)
				(< low-y 0)
				(>= up-y 0))
		   (make-interval (* up-x low-y) (* up-x up-y)))
		  ((and (>= low-x 0)
				(>= up-x 0)
				(< low-y 0)
				(< up-y 0))
		   (make-interval (* up-x low-y) (* low-x up-y)))
		  ((and (< low-x 0)
				(>= up-x 0)
				(>= low-y 0)
				(>= up-y 0))
		   (make-interval (* low-x up-y) (* up-x up-y)))
		  ((and (< low-x 0)
				(>= up-x 0)
				(< low-y 0)
				(>= up-y 0))
		   (make-interval (min (* low-x up-y) (* up-x low-y))
						  (max (* low-x low-y) (* up-x up-y))))
		  ((and (< low-x 0)
				(>= up-x 0)
				(< low-y 0)
				(< up-y 0))
		   (make-interval (* up-x low-y) (* low-x low-y)))
		  ((and (< low-x 0)
				(< up-x 0)
				(>= low-y 0)
				(>= up-y 0))
		   (make-interval (* low-x up-y) (* up-x low-y)))
		  ((and (< low-x 0)
				(< up-x 0)
				(< low-y 0)
				(>= up-y 0))
		   (make-interval (* low-x up-y) (* low-x low-y)))
		  ((and (< low-x 0)
				(< up-x 0)
				(< low-y 0)
				(< up-y 0))
		   (make-interval (* up-x up-y) (* low-x low-y))))))

(define interval-a (make-interval 2 4))
(define interval-b (make-interval -2 4))
(define interval-c (make-interval -4 -2))

(mul-interval interval-a interval-a)
(mul-interval interval-a interval-b)
(mul-interval interval-a interval-c)
(mul-interval interval-b interval-a)
(mul-interval interval-b interval-b)
(mul-interval interval-b interval-c)
(mul-interval interval-c interval-a)
(mul-interval interval-c interval-b)
(mul-interval interval-c interval-c)
